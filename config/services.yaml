# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    avatar_directory: '%kernel.project_dir%/public/uploads/avatars'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectDir: '%kernel.project_dir%'
            $environment: '%kernel.environment%'
            $locale: '%locale%'
            $databaseHealthHistoryDays: '%env(int:DATABASE_HEALTH_HISTORY_DAYS)%'
            $databaseLogLoginHistoryDays: '%env(int:DATABASE_LOG_LOGIN_HISTORY_DAYS)%'
            $databaseLogRequestHistoryDays: '%env(int:DATABASE_LOG_REQUEST_HISTORY_DAYS)%'
            $elasticNumberOfShards: '%env(int:ELASTICSEARCH_NUMBER_OF_SHARDS)%'
            $elasticNumberOfReplicas: '%env(int:ELASTICSEARCH_NUMBER_OF_REPLICAS)%'
            $lockUserOnLoginFailureAttempts: '%env(int:LOCK_USER_ON_LOGIN_FAILURE_ATTEMPTS)%'
    _instanceof:
        App\General\Application\Rest\Interfaces\RestResourceInterface:
            tags: [ 'app.rest.resource', 'app.stopwatch' ]
        App\General\Application\Rest\Interfaces\RestSmallResourceInterface:
            tags: [ 'app.rest.resource', 'app.stopwatch' ]
        App\General\Application\Rest\Interfaces\BaseRestResourceInterface:
            calls:
                - setValidator: ['@validator']
        AutoMapperPlus\MapperInterface:
            tags: [ 'app.stopwatch' ]
        Symfony\Component\EventDispatcher\EventSubscriberInterface:
            tags: [ 'app.stopwatch' ]
        Symfony\Component\HttpKernel\Controller\ArgumentValueResolverInterface:
            tags: [ 'app.stopwatch' ]
        App\General\Application\Utils\Interfaces\MailSenderInterface:
            calls:
                - setMailerService: [ '@App\General\Domain\Service\Interfaces\MailerServiceInterface', '%env(resolve:APP_SENDER_EMAIL)%', '%env(resolve:APP_ERROR_RECEIVER_EMAIL)%', '%env(int:APP_EMAIL_NOTIFICATION_ABOUT_ERROR)%']
                - setTwig: ['@twig']
        App\Project\Shared\Application\Bus\Command\CommandHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: command_bus }
        App\Project\Shared\Application\Bus\Query\QueryHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: query.bus }
        App\Project\Shared\Application\Bus\Event\EventSubscriberInterface:
            tags:
                - { name: messenger.message_handler, bus: event.bus }
        App\Project\Shared\Domain\Event\DomainEvent:
            tags: [ 'projects.domain_event' ]
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/*/Infrastructure/DataFixtures/'
            - '../src/DependencyInjection/'
            - '../src/*/Domain/Entity/'
            - '../src/*/Transport/EventListener/'
            - '../src/Kernel.php'
            - '../src/**/Application/Command/*'
            - '../src/**/Application/Query/*'
            - '../src/**/Mapping/*'
            - '../src/**/Exception/*'
            - '../src/**/ValueObject/*'
            - '../src/**/DTO/*'

    App\Project\Shared\Domain\:
        resource: '../src/Project/Shared/Domain'
        autowire: false
    App\Project\Shared\SharedBoundedContext\Domain\:
        resource: '../src/Project/Shared/SharedBoundedContext/Domain'
        autowire: false
    App\Project\Projects\Domain\:
        resource: '../src/Project/Projects/Domain'
        autowire: false
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\General\Transport\ValueResolver\EntityValueResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 150 }

    App\Log\Application\Service\RequestLoggerService:
        arguments:
            $sensitiveProperties: '%env(json:REQUEST_LOG_SENSITIVE_PROPERTIES)%'

    App\General\Application\Resource\ResourceCollection:
        arguments: [ !tagged app.rest.resource ]

    App\General\Transport\EventSubscriber\RequestLogSubscriber:
        arguments:
            $ignoredRoutes: '%env(json:REQUEST_LOG_IGNORED_ROUTES)%'

    App\General\Domain\Service\Interfaces\ElasticsearchServiceInterface:
        class: App\General\Infrastructure\Service\ElasticsearchService
        arguments:
            $host: '%env(ELASTICSEARCH_HOST)%'
            $username: '%env(ELASTICSEARCH_USERNAME)%'
            $password: '%env(ELASTICSEARCH_PASSWORD)%'
        #lazy: true
    App\Project\Shared\Infrastructure\Service\DomainEventMapper:
        tags:
            - { name: projects.mapper, target_tag: projects.domain_event }

    App\Project\Shared\Infrastructure\Service\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onException }

    App\User\Transport\Service\FileUploader:
        arguments:
            $targetDirectory: '%avatar_directory%'

    App\Quiz\Transport\Controller\Api\v1\IndexController:
        autowire: false

when@dev:
    services:
        _defaults:
            autowire: true
            autoconfigure: true

        App\ApiKey\Infrastructure\DataFixtures\:
            resource: '../src/ApiKey/Infrastructure/DataFixtures/*'

        App\Role\Infrastructure\DataFixtures\:
            resource: '../src/Role/Infrastructure/DataFixtures/*'

        App\User\Infrastructure\DataFixtures\:
            resource: '../src/User/Infrastructure/DataFixtures/*'

        App\Quiz\Infrastructure\DataFixtures\:
            resource: '../src/Quiz/Infrastructure/DataFixtures/*'
        App\Tests\TestCase\:
            resource: '../tests/TestCase/*'

        App\Tests\Utils\:
            resource: '../tests/Utils/*'

        ProxyManager\Factory\AccessInterceptorValueHolderFactory:
            class: ProxyManager\Factory\AccessInterceptorValueHolderFactory

        doctrine.dbal.default_connection.stopwatch:
            class: Doctrine\DBAL\Connection
            decorates: doctrine.dbal.default_connection
            factory: [ '@App\General\Application\Decorator\StopwatchDecorator', decorate ]
            arguments: [ '@doctrine.dbal.default_connection.stopwatch.inner' ]

        symfony.component.serializer.stopwatch:
            class: Symfony\Component\Serializer\Serializer
            decorates: serializer
            factory: [ '@App\General\Application\Decorator\StopwatchDecorator', decorate ]
            arguments: [ '@symfony.component.serializer.stopwatch.inner' ]

when@test:
    services:
        _defaults:
            autowire: true
            autoconfigure: true
            public: true

        App\ApiKey\Infrastructure\DataFixtures\:
            resource: '../src/ApiKey/Infrastructure/DataFixtures/*'

        App\Role\Infrastructure\DataFixtures\:
            resource: '../src/Role/Infrastructure/DataFixtures/*'

        App\User\Infrastructure\DataFixtures\:
            resource: '../src/User/Infrastructure/DataFixtures/*'

        App\Tests\TestCase\:
            resource: '../tests/TestCase/*'

        App\Tests\Utils\:
            resource: '../tests/Utils/*'
