version: '3.5'

services:

    nginx:
      image: ${COMPOSE_PROJECT_NAME}-nginx:latest
      build:
        context: ./docker/
        args:
          BUILD_ARGUMENT_ENV: dev
        dockerfile: ./nginx/Dockerfile
      container_name: ${COMPOSE_PROJECT_NAME}-nginx
      restart: always
      ports:
        - "${WEB_PORT_HTTP}:80"
        - "${WEB_PORT_SSL}:443"
      volumes:
        - ./:/var/www/html:ro,cached
      depends_on:
        - symfony
      networks:
        - symfony

    symfony: &symfony-template
      image: ${COMPOSE_PROJECT_NAME}-symfony:latest
      build:
        context: .
        args:
          BUILD_ARGUMENT_ENV: dev
          HOST_UID: ${HOST_UID}
          HOST_GID: ${HOST_GID}
          XDEBUG_CONFIG: ${XDEBUG_CONFIG}
        dockerfile: ./Dockerfile
      container_name: ${COMPOSE_PROJECT_NAME}-symfony
      volumes:
        - ./:/var/www/html:cached
      depends_on:
        - mysql
        - rabbitmq
        - elasticsearch
        - redis
      networks:
        - symfony

    ### Cron tasks, RabbitMQ consumers
    supervisord:
      <<: *symfony-template
      container_name: ${COMPOSE_PROJECT_NAME}-supervisord
      expose: []
      command: ["/usr/bin/supervisord"]


    adminer:
      image: adminer
      restart: always
      ports:
        - "8089:8080"

    mysql:
      image: mysql:8.0
      container_name: ${COMPOSE_PROJECT_NAME}-mysql
      command: --sql_mode="" --default-authentication-plugin=mysql_native_password --innodb-use-native-aio=${INNODB_USE_NATIVE_AIO:-1}
      environment:
        MYSQL_ROOT_PASSWORD: secret
        MYSQL_DATABASE: symfony
      ports:
        - "33061:3306"
      volumes:
        - ./var/mysql-data:/var/lib/mysql:delegated
        - ./docker/dev/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      networks:
        - symfony

    rabbitmq:
      image: ${COMPOSE_PROJECT_NAME}-rabbitmq
      build:
        context: ./docker/rabbitmq/
        dockerfile: ./Dockerfile
      container_name: ${COMPOSE_PROJECT_NAME}-rabbitmq
      environment:
        RABBITMQ_ERLANG_COOKIE: 7ead507151fc4461b9f45c1161384a04
        RABBITMQ_DEFAULT_USER: guest
        RABBITMQ_DEFAULT_PASS: guest
        RABBITMQ_DEFAULT_VHOST: /
      ports:
        - "15672:15672"
      volumes:
        - ./var/rabbitmq:/var/lib/rabbitmq:delegated
      networks:
        - symfony

    elasticsearch:
      image: ${COMPOSE_PROJECT_NAME}-elasticsearch
      build:
        context: ./docker/
        args:
          ELK_VERSION: ${ELK_VERSION}
        dockerfile: ./elasticsearch/Dockerfile
      container_name: ${COMPOSE_PROJECT_NAME}-elasticsearch
      environment:
        ES_JAVA_OPTS: "-Xmx1024m -Xms1024m"
        ELASTIC_PASSWORD: changeme
        # Use single node discovery in order to disable production mode and avoid bootstrap checks
        # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
        discovery.type: single-node
      ports:
        - "9200:9200"
        - "9300:9300"
      volumes:
        - ./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
        - ./var/elasticsearch-data:/usr/share/elasticsearch/data:delegated
      networks:
        - symfony

    kibana:
      image: ${COMPOSE_PROJECT_NAME}-kibana
      platform: linux/x86_64
      build:
        context: ./docker/
        args:
          ELK_VERSION: ${ELK_VERSION}
        dockerfile: ./kibana/Dockerfile
      container_name: ${COMPOSE_PROJECT_NAME}-kibana
      ports:
        - "5601:5601"
      volumes:
        - ./docker/dev/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      depends_on:
        - elasticsearch
      networks:
        - symfony

    redis:
      image: ${COMPOSE_PROJECT_NAME}-redis
      container_name: ${COMPOSE_PROJECT_NAME}-redis
      build:
        context: ./docker/redis
      restart: always
      ports:
        - "6379:6379"
      volumes:
        - ./var/redis:/data:delegated
      networks:
        - symfony

###> symfony/mercure-bundle ###
    mercure:
      image: dunglas/mercure
      restart: unless-stopped
      environment:
        SERVER_NAME: ':80'
        MERCURE_PUBLISHER_JWT_KEY: 'myJWTKey'
        MERCURE_SUBSCRIBER_JWT_KEY: 'myJWTKey'
        MERCURE_CORS_ALLOWED_ORIGINS: '*'
        DEMO: 1
        ALLOW_ANONYMOUS: 1
        PUBLISH_ALLOWED_ORIGINS: '*'
        CORS_ALLOWED_ORIGINS: '*'
        DEBUG: 1
        # Set the URL of your Symfony project (without trailing slash!) as value of the cors_origins directive
        MERCURE_EXTRA_DIRECTIVES: |
          cors_origins *
      ports:
      - "9090:80"

      # Comment the following line to disable the development mode
      command: /usr/bin/caddy run --config /etc/caddy/Caddyfile.dev
      volumes:
        - mercure_data:/data
        - mercure_config:/config
###< symfony/mercure-bundle ###

networks:
  symfony:
    name: symfony

volumes:
###> symfony/mercure-bundle ###
  mercure_data:
  mercure_config:
###< symfony/mercure-bundle ###
